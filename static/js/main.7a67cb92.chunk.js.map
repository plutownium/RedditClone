{"version":3,"sources":["FullThread/FullThread.js","Thread/Thread.js","Home/Home.js","App.js","serviceWorker.js","store/posts.js","index.js"],"names":["fullThread","props","stateFromStorage","localStorage","getItem","posts","returnPostsToState","JSON","parse","console","log","this","setItem","stringify","number","location","pathname","slice","threadTitle","title","upVotes","upvotes","author","age","postText","className","to","Component","connect","state","dispatch","type","payload","thread","post","style","border","float","padding","width","onClick","upVote","downVote","id","openThread","textAlign","flair","comments","Home","loggedIn","i","length","setState","postBox","name","onChange","postTitle","postMsg","postThread","threads","map","index","key","bind","margin","App","checkname","username","tempTitle","tempMsg","event","target","value","tempThread","makeNewPost","signUp","checkName","handleChange","path","exact","component","FullThread","newPost","Boolean","window","hostname","match","initialPosts","reducer","action","concat","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a67cb92.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./FullThread.css\";\r\n\r\nclass fullThread extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tconst stateFromStorage = localStorage.getItem(\"state\");\r\n\t\tif (this.props.posts === null) {\r\n\t\t\tthis.props.returnPostsToState(JSON.parse(stateFromStorage));\r\n\t\t}\r\n\t\tconsole.log(\"Message sent from the Constructor method\");\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(\"300: \", this.props.posts);\r\n\t\tlocalStorage.setItem(\"state\", JSON.stringify(this.props.posts));\r\n\t}\r\n\r\n\trender() {\r\n\t\t// deliberate exclusion of 2nd parameter in .slice() to make it go til the end\r\n\t\tconst number = this.props.location.pathname.slice(1);\r\n\t\tconst threadTitle = this.props.posts[number]\r\n\t\t\t? this.props.posts[number].title\r\n\t\t\t: \"\";\r\n\t\t// let flair = this.props.posts[number]\r\n\t\t// ? this.props.post[number].flair\r\n\t\t// : \"\";\r\n\t\tconst upVotes = this.props.posts[number]\r\n\t\t\t? this.props.posts[number].upvotes\r\n\t\t\t: \"\";\r\n\t\tconst author = this.props.posts[number]\r\n\t\t\t? this.props.posts[number].author\r\n\t\t\t: \"\";\r\n\t\tconst age = this.props.posts[number]\r\n\t\t\t? this.props.posts[number].age\r\n\t\t\t: \"\";\r\n\t\tconst postText = this.props.posts[number]\r\n\t\t\t? this.props.posts[number].postText\r\n\t\t\t: \"\";\r\n\r\n\t\t// if (this.props.posts[number].flair) {\r\n\t\t// \tflair = this.props.posts[number].flair;\r\n\t\t// }\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"MainBody\">\r\n\t\t\t\t\t<h4>Thread titled: {threadTitle}</h4>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{/* {flair} */}\r\n\t\t\t\t\t<p>Upvotes: {upVotes}</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tPosted by u/{author} {age} ago\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>{postText}</p>\r\n\r\n\t\t\t\t\t<Link to=\"/\">Back to Homepage</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\treturnPostsToState: stateFromStorage =>\r\n\t\t\tdispatch({ type: \"RETURN\", payload: stateFromStorage })\r\n\t};\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tposts: state.posts\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(fullThread);\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Thread.css\";\r\n\r\nconst thread = post => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tborder: \"1px solid black\",\r\n\t\t\t\tfloat: \"left\",\r\n\t\t\t\tpadding: \"5px 5px 0px 5px\",\r\n\t\t\t\twidth: \"750px\"\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div style={{ float: \"left\", padding: \"5px\" }}>\r\n\t\t\t\t<button className=\"Upvote\" onClick={post.upVote}>\r\n\t\t\t\t\t^\r\n\t\t\t\t</button>\r\n\t\t\t\t<p className=\"UpvoteText\">{post.upvotes}</p>\r\n\t\t\t\t<button className=\"Downvote\" onClick={post.downVote}>\r\n\t\t\t\t\tv\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<Link to={\"/\" + post.id}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={post.openThread}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tfloat: \"left\",\r\n\t\t\t\t\t\ttextAlign: \"left\",\r\n\t\t\t\t\t\twidth: \"700px\"\r\n\t\t\t\t\t\t// border: \"1px solid red\"\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span>{post.flair}</span>\r\n\t\t\t\t\t<span className=\"TitleText\">{post.title}</span>\r\n\t\t\t\t\t<p className=\"AuthorText\">\r\n\t\t\t\t\t\tPosted by u/{post.author} {post.age} ago\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className=\"CommentText\">{post.comments} Comments</p>\r\n\t\t\t\t</div>\r\n\t\t\t</Link>\r\n\t\t\t<br />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default thread;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Thread from \"../Thread/Thread\";\r\n\r\nclass Home extends Component {\r\n\tstate = {\r\n\t\t// posts: [\r\n\t\t// \t{\r\n\t\t// \t\tid: 0,\r\n\t\t// \t\tupvotes: 831,\r\n\t\t// \t\tflair: null,\r\n\t\t// \t\ttitle: \"New? READ ME FIRST!\",\r\n\t\t// \t\tauthor: \"michael0x2a\",\r\n\t\t// \t\tage: \"2 years\",\r\n\t\t// \t\tcomments: 15\r\n\t\t// \t},\r\n\t\t// \t{\r\n\t\t// \t\tid: 1,\r\n\t\t// \t\tupvotes: 1000,\r\n\t\t// \t\tflair: null,\r\n\t\t// \t\ttitle:\r\n\t\t// \t\t\t\"You guys interested in a website that focuses on learning design / ux / ui / css ?\",\r\n\t\t// \t\tauthor: \"web_dev1996\",\r\n\t\t// \t\tage: \"13 hours\",\r\n\t\t// \t\tcomments: 130\r\n\t\t// \t},\r\n\t\t// \t{\r\n\t\t// \t\tid: 2,\r\n\t\t// \t\tupvotes: 23,\r\n\t\t// \t\tflair: null,\r\n\t\t// \t\ttitle:\r\n\t\t// \t\t\t\"How would you learn to code if you had all the free time? (Enough savings to sustain yourself)\",\r\n\t\t// \t\tauthor: \"hakerys23\",\r\n\t\t// \t\tage: \"6 hours\",\r\n\t\t// \t\tcomments: 9\r\n\t\t// \t},\r\n\t\t// \t{\r\n\t\t// \t\tid: 3,\r\n\t\t// \t\tupvotes: 3300,\r\n\t\t// \t\tflair: \"Resource\",\r\n\t\t// \t\ttitle:\r\n\t\t// \t\t\t\"Learn the syntax of any programming language really fast, like in minutes\",\r\n\t\t// \t\tauthor: \"1TMission\",\r\n\t\t// \t\tage: \"1 day\",\r\n\t\t// \t\tcomments: 91\r\n\t\t// \t},\r\n\t\t// \t{\r\n\t\t// \t\tid: 4,\r\n\t\t// \t\tupvotes: 16,\r\n\t\t// \t\tflair: null,\r\n\t\t// \t\ttitle:\r\n\t\t// \t\t\t\"What tool do you use to plan your projects from scratch?\",\r\n\t\t// \t\tauthor: \"wulfgar4president\",\r\n\t\t// \t\tage: \"10 hours\",\r\n\t\t// \t\tcomments: 6\r\n\t\t// \t}\r\n\t\t// ],\r\n\t\tloggedIn: false\r\n\t};\r\n\r\n\tupVote = id => {\r\n\t\tconsole.log(1);\r\n\t\t// spread the posts out into an immutable object\r\n\t\tlet posts = [...this.state.posts];\r\n\r\n\t\t// Look for the correct post to modify\r\n\t\tfor (let i = 0; i < posts.length; i++) {\r\n\t\t\tif (posts[i].id === id) {\r\n\t\t\t\t// Modify it with +1 upvotes\r\n\t\t\t\t// console.log(posts[i]);\r\n\t\t\t\tposts[i].upvotes += 1;\r\n\t\t\t\t// console.log(posts[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tposts: posts\r\n\t\t});\r\n\t};\r\n\r\n\tdownVote = id => {\r\n\t\tconsole.log(2);\r\n\t\t// spread the posts out into an immutable object\r\n\t\tlet posts = [...this.state.posts];\r\n\r\n\t\t// Look for the correct post to modify\r\n\t\tfor (let i = 0; i < posts.length; i++) {\r\n\t\t\tif (posts[i].id === id) {\r\n\t\t\t\t// Modify it with -1 upvotes (+1 downvotes)\r\n\t\t\t\t// console.log(posts[i]);\r\n\t\t\t\tposts[i].upvotes -= 1;\r\n\t\t\t\t// console.log(posts[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tposts: posts\r\n\t\t});\r\n\t};\r\n\r\n\topenThread = id => {\r\n\t\tconsole.log(id);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst isLoggedIn = this.state.loggedIn;\r\n\r\n\t\tlet postBox;\r\n\t\tif (isLoggedIn) {\r\n\t\t\tpostBox = (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Post something!</p>\r\n\t\t\t\t\t<p>Post Title:</p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\tonChange={this.postTitle}\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t<p>Message (Optional)</p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"msg\"\r\n\t\t\t\t\t\tonChange={this.postMsg}\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t<button onClick={this.postThread}>Post</button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tpostBox = null;\r\n\t\t}\r\n\r\n\t\tconst threads = (\r\n\t\t\t<div style={{ width: \"750px\" }}>\r\n\t\t\t\t{this.props.posts.map((post, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t{/* <Link to={\"/\" + index}> */}\r\n\t\t\t\t\t\t\t<Thread\r\n\t\t\t\t\t\t\t\tclassName=\"ThreadContainer\"\r\n\t\t\t\t\t\t\t\tupvotes={post.upvotes}\r\n\t\t\t\t\t\t\t\tflair={post.flair}\r\n\t\t\t\t\t\t\t\ttitle={post.title}\r\n\t\t\t\t\t\t\t\tauthor={post.author}\r\n\t\t\t\t\t\t\t\tage={post.age}\r\n\t\t\t\t\t\t\t\tcomments={post.comments}\r\n\t\t\t\t\t\t\t\tupVote={this.upVote.bind(this, post.id)}\r\n\t\t\t\t\t\t\t\tdownVote={this.downVote.bind(this, post.id)}\r\n\t\t\t\t\t\t\t\topenThread={this.openThread.bind(this, post.id)}\r\n\t\t\t\t\t\t\t\tid={post.id}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{/* </Link> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div style={{ margin: \"20px\" }}> {threads}</div>\r\n\t\t\t\t{postBox}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tposts: state.posts\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n// export default Home;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport FullThread from \"./FullThread/FullThread\";\r\nimport Home from \"./Home/Home\";\r\n\r\n// const APP_ID = \"m9eXdciVGsQDqw\";\r\n// const APP_SECRET = \"h9cVbWML9Tf59nWu0vaBAukMYD8\";\r\n// const hard_url =\r\n// \"https://www.reddit.com/r/learnprogramming/new/.json?count=25&after=\";\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tcheckname: \"test\",\r\n\t\tusername: \"\",\r\n\t\tloggedIn: false,\r\n\t\ttempTitle: \"\",\r\n\t\ttempMsg: \"\"\r\n\t};\r\n\r\n\tpostTitle = event => {\r\n\t\tthis.setState({ tempTitle: event.target.value });\r\n\t};\r\n\r\n\tpostMsg = event => {\r\n\t\tthis.setState({ tempMsg: event.target.value });\r\n\t};\r\n\r\n\tpostThread = event => {\r\n\t\t// the idea: when the button is clicked, record the contents of input fields\r\n\t\t// into stored state.\r\n\t\tconsole.log(\"this.props.posts: \", this.props.posts);\r\n\t\tlet newPosts = [...this.props.posts];\r\n\t\tlet newId = newPosts.length;\r\n\r\n\t\tconst tempThread = {\r\n\t\t\tid: newId,\r\n\t\t\tupvotes: 1,\r\n\t\t\tflair: null,\r\n\t\t\ttitle: this.state.tempTitle,\r\n\t\t\tauthor: this.state.username,\r\n\t\t\tage: \"1 minute [hardcoded]\",\r\n\t\t\tcomments: 0,\r\n\t\t\tpostText: this.state.tempMsg\r\n\t\t};\r\n\r\n\t\t// newPosts.unshift(tempThread);\r\n\r\n\t\t// this.setState({ posts: newPosts });\r\n\t\tconsole.log(\"event: \", tempThread);\r\n\t\tthis.props.makeNewPost({ tempThread });\r\n\t};\r\n\r\n\tsignUp = () => {\r\n\t\tif (this.state.username.length < 3) {\r\n\t\t\tthis.setState({ checkName: \"Username is too short\" });\r\n\t\t\tconsole.log(\"Too short\");\r\n\t\t} else {\r\n\t\t\tthis.setState({ checkName: \"Long enough\" });\r\n\t\t\tconsole.log(\"Long enough\");\r\n\t\t\tthis.setState({ loggedIn: !this.state.loggedIn });\r\n\t\t}\r\n\t};\r\n\r\n\thandleChange = event => {\r\n\t\tthis.setState({\r\n\t\t\tusername: event.target.value\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst isLoggedIn = this.state.loggedIn;\r\n\r\n\t\tlet postBox;\r\n\t\tif (isLoggedIn) {\r\n\t\t\tpostBox = (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Post something!</p>\r\n\t\t\t\t\t<p>Post Title:</p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\tonChange={this.postTitle}\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t<p>Message (Optional)</p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"msg\"\r\n\t\t\t\t\t\tonChange={this.postMsg}\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t<button onClick={this.postThread}>Post</button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tpostBox = null;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<div className=\"Header\">\r\n\t\t\t\t\t\t<p className=\"Logo\">Reddit Clone</p>\r\n\t\t\t\t\t\t{this.state.username.length > 2 &&\r\n\t\t\t\t\t\tthis.state.loggedIn ? (\r\n\t\t\t\t\t\t\t<p>Logged in as u/{this.state.username}</p>\r\n\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t{this.state.loggedIn ? null : (\r\n\t\t\t\t\t\t\t<div style={{ float: \"right\" }}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tname=\"Username\"\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t></input>\r\n\t\t\t\t\t\t\t\t<button onClick={this.signUp}>Sign Up</button>\r\n\t\t\t\t\t\t\t\t<p>{this.state.checkName}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Route path=\"/\" exact component={Home}></Route>\r\n\t\t\t\t\t<Route path=\"/:id\" exact component={FullThread}></Route>\r\n\t\t\t\t\t{postBox}\r\n\t\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\t// dispatches the new post into redux state\r\n\t\tmakeNewPost: post => dispatch({ type: \"ADD_POST\", newPost: { post } })\r\n\t};\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tposts: state.posts\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialPosts = {\r\n\tposts: [\r\n\t\t{\r\n\t\t\tid: 0,\r\n\t\t\tupvotes: 831,\r\n\t\t\tflair: null,\r\n\t\t\ttitle: \"New? READ ME FIRST!\",\r\n\t\t\tauthor: \"michael0x2a\",\r\n\t\t\tage: \"2 years\",\r\n\t\t\tcomments: 15,\r\n\t\t\tpostText:\r\n\t\t\t\t\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tupvotes: 1000,\r\n\t\t\tflair: null,\r\n\t\t\ttitle:\r\n\t\t\t\t\"You guys interested in a website that focuses on learning design / ux / ui / css ?\",\r\n\t\t\tauthor: \"web_dev1996\",\r\n\t\t\tage: \"13 hours\",\r\n\t\t\tcomments: 130,\r\n\t\t\tpostText:\r\n\t\t\t\t\"Ut enim ad minim veniam, quis nostrud exercitation ullamco.\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\tupvotes: 23,\r\n\t\t\tflair: null,\r\n\t\t\ttitle:\r\n\t\t\t\t\"How would you learn to code if you had all the free time? (Enough savings to sustain yourself)\",\r\n\t\t\tauthor: \"hakerys23\",\r\n\t\t\tage: \"6 hours\",\r\n\t\t\tcomments: 9,\r\n\t\t\tpostText:\r\n\t\t\t\t\"Duis aute irure dolor in reprehenderit in voluptate velit esse.\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\tupvotes: 3300,\r\n\t\t\tflair: \"Resource\",\r\n\t\t\ttitle:\r\n\t\t\t\t\"Learn the syntax of any programming language really fast, like in minutes\",\r\n\t\t\tauthor: \"1TMission\",\r\n\t\t\tage: \"1 day\",\r\n\t\t\tcomments: 91,\r\n\t\t\tpostText:\r\n\t\t\t\t\"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia.\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\tupvotes: 16,\r\n\t\t\tflair: null,\r\n\t\t\ttitle: \"What tool do you use to plan your projects from scratch?\",\r\n\t\t\tauthor: \"wulfgar4president\",\r\n\t\t\tage: \"10 hours\",\r\n\t\t\tcomments: 6,\r\n\t\t\tpostText:\r\n\t\t\t\t\"Aliquet nibh praesent tristique magna. Arcu cursus vitae congue mauris rhoncus aenean vel.\"\r\n\t\t}\r\n\t],\r\n\tloggedIn: false\r\n};\r\n\r\nconst reducer = (state = initialPosts, action) => {\r\n\tif (action.type === \"ADD_POST\") {\r\n\t\tconsole.log(\"HEY: \", action.newPost);\r\n\t\tconsole.log(state.posts.concat(action.newPost.post.tempThread));\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\t// receives newPost data from app.js\r\n\t\t\tposts: state.posts.concat(action.newPost.post.tempThread)\r\n\t\t};\r\n\t}\r\n\tif (action.type === \"RETURN\") {\r\n\t\tconsole.log(\"RETURNED! \", action.payload);\r\n\t\tconsole.log(\"RETURNED: \", state.posts);\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tposts: state.posts.concat(action.payload)\r\n\t\t};\r\n\t}\r\n\r\n\treturn state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport reducer from \"./store/posts\";\r\n// import counterReducer from \"./store/reducers/counter\";\r\n// import resultReducer from \"./store/reducers/result\";\r\n\r\n// const rootReducer = combineReducers({\r\n// \tctr: counterReducer,\r\n// \tres: resultReducer\r\n// });\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}